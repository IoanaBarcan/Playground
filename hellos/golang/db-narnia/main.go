package main

import (
	"database/sql"
	"fmt"
	"math/rand"
	"sync"
	"time"
	
  _	"github.com/denisenkom/go-mssqldb"
)

func main() {
	var wg sync.WaitGroup // used to wait all goroutines to finish
	rand.Seed(time.Now().UnixNano()) // to have different values generated by rand on multiple program executions
	
	connString := fmt.Sprintf("server=<server_name>;user id=<user_name>;password=<password>;port=1433;database=Narnia")

	conn, err := sql.Open("mssql", connString)
	if err != nil {
		panic(fmt.Sprintf("Open connection failed:", err.Error()))
	}
	defer conn.Close()

	wg.Add(2)

	go printAll(conn, &wg)
  	go compute(conn, &wg)

	wg.Wait()
	
	panic("show me the stack") // to check whether there are still hanging / executing goroutines, except main
}

// Calls a stored procedure: SelectAll
func printAll(conn *sql.DB, wg *sync.WaitGroup) {
	smt, err := conn.Prepare("exec SelectAll;")
	if err != nil {
		panic(fmt.Sprintf("Prepare failed:", err.Error()))
	}
	defer smt.Close()

	rows, err := smt.Query()
	if err != nil {
		panic(fmt.Sprintf("Query failed:", err.Error()))
	}
	defer rows.Close()
	
	for rows.Next() {
		var (
			name string
			appearances int64
			role string
		)

		if err = rows.Scan(&name, &appearances, &role); err != nil {
			panic(fmt.Sprintf("Scan failed:", err.Error()))
		}

		fmt.Printf("Name: %s; appearances: %d; role: %s.\n", name, appearances, role)

		// Only to highlight concurrency
		time.Sleep(time.Duration(rand.Intn(50)) * time.Millisecond)
	}

	wg.Done()
}

// Performs a very basic calculation: avg of the total nr. of character appearances
func compute(conn *sql.DB, wg *sync.WaitGroup) {
	smt, err := conn.Prepare("select avg(TotalAppearances) from Characters;")
	if err != nil {
		panic(fmt.Sprintf("Prepare failed:", err.Error()))
	}
	defer smt.Close()

	var avg int64
	smt.QueryRow().Scan(&avg)

	// Only to highlight concurrency
	time.Sleep(time.Duration(rand.Intn(100)) * time.Millisecond)

	fmt.Println("Avg:", avg)

	wg.Done()
}

